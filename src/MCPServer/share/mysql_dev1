-- Issue 5084
-- If user restarts while waiting to choose compression algorithm, the SIP job is orphaned
-- Tail of chain = Prepare AIP = 3e25bda6-5314-4bb4-aa1e-90900dce887d
-- Start of new chain = Select Compression algorithm = 01d64f58-8295-4b7b-9cab-8f1b153a504f

-- add  move after prepare AIP

SET @microserviceGroup = 'Prepare AIP';
SET @MoveSIPToFailedLink = '7d728c39-395f-4892-8193-92f086c0546f';
SET @MoveTransferToFailedLink = '61c316a6-0a50-4f65-8767-1f44b1eeb6dd';


SET @XLink = '3e25bda6-5314-4bb4-aa1e-90900dce887d';
-- SET @YLink = '1cd3b36a-5252-4a69-9b1c-3b36829288ab';

SET @TasksConfigPKReference = 'ae090b70-0234-40ea-bc11-4be27370515f';
SET @TasksConfig = '18dceb0a-dfb1-4b18-81a7-c6c5c578c5f1';
SET @MicroServiceChainLink = '002716a1-ae29-4f36-98ab-0d97192669c4';
SET @MicroServiceChainLinksExitCodes = '2858403b-895f-4ea3-b7b7-388de75fbb39';
SET @defaultNextChainLink = @MoveSIPToFailedLink;
SET @NextMicroServiceChainLink = NULL;

INSERT INTO StandardTasksConfigs (pk, filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES (@TasksConfigPKReference, NULL, NULL, NULL, FALSE, NULL, NULL, 'moveSIP_v0.0', '"%SIPDirectory%" "%watchDirectoryPath%workFlowDecisions/compressionAIPDecisions/." "%SIPUUID%" "%sharedPath%"');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '36b2e239-4a57-4aa5-8ebc-7a29139baca6', @TasksConfigPKReference, 'Move to compressionAIPDecisions directory');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;

-- set non zero exit code --
UPDATE MicroServiceChainLinks SET defaultNextChainLink = @MoveSIPToFailedLink WHERE pk = @XLink;

-- set zero exit code --
UPDATE MicroServiceChainLinksExitCodes SET nextMicroServiceChainLink = @NextMicroServiceChainLink where microServiceChainLink = @XLink;


-- Add new watched directory for compressionAIP decisions, and chain for it to point to
SET @WatchedDirectory = 'dfb22984-c6eb-4c5d-939c-0df43559033e';
SET @MicroServiceChains = '27cf6ca9-11b4-41ac-9014-f8018bcbad5e';

INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, '01d64f58-8295-4b7b-9cab-8f1b153a504f', 'Compress AIP');

INSERT INTO WatchedDirectories (pk, watchedDirectoryPath, chain, onlyActOnDirectories, expectedType)
    VALUES (@WatchedDirectory, '%watchDirectoryPath%workFlowDecisions/compressionAIPDecisions/', @MicroServiceChains, True, '76e66677-40e6-41da-be15-709afb334936');

-- /Issue 5084

-- issue-1843
-- Add ability to generate a DIP from an AIP.
-- -Normalization tool selection without fits already having been run


-- extension
-- two steps set and run
229e34d9-3768-4b78-97b7-6cd4a2f07868 | b549130c-943b-4791-b1f6-93b837990138 | extension (default) |
04806cbd-d146-46e9-b3b6-1bd664636057
SET @TasksConfig = 'b5e6340f-07f3-4ed1-aada-7a7f049b19b9';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;


INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

--taskConfig run fits b8403044-12a3-4b63-8399-772b9adace15
--Run FITS
SET @TasksConfig = 'b8403044-12a3-4b63-8399-772b9adace15';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = '83484326-7be7-4f9f-b252-94553cd42370';
SET @NextMicroServiceChainLink = '83484326-7be7-4f9f-b252-94553cd42370';

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

-- FITS DROID
SET @TasksConfig = 'b8c10f19-40c9-44c8-8b9f-6fab668513f5';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;

-- FITS - ffident
SET @TasksConfig = 'b5e6340f-07f3-4ed1-aada-7a7f049b19b9';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;

-- FITS - JHOVE
SET @TasksConfig = '76135f22-6dba-417f-9833-89ecbe9a3d99';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;

-- FITS - summary 
SET @TasksConfig = 'c87ec738-b679-4d8e-8324-73038ccf0dfd';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;

-- FITS - file utility
SET @TasksConfig = '0732af8f-d60b-43e0-8f75-8e89039a05a8';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @RunFITSLink;
SET @NextMicroServiceChainLink = @RunFITSLink;

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;
SET @RunFITSLink = @MicroServiceChainLink;

SET @MicroServiceChains = '';
SET @startingLink = @MicroServiceChainLink;
SET @description = 'FITS - file utility';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, @startingLink, @description);
SET @FITSFileUtilityChain = @MicroServiceChains;




-- Choose tool
INSERT INTO TasksConfigs (taskType, taskTypePKReference, description)
    VALUES
    (2,      LAST_INSERT_ID(), 'Select course and assignment');
INSERT INTO MicroServiceChainLinks (microserviceGroup, currentTask, defaultNextChainLink)    
    VALUES (@microserviceGroup, LAST_INSERT_ID(), NULL);
set @MicroServiceChainLink = LAST_INSERT_ID();
-- FIDO
SET @MicroServiceChainChoice = '';
SET @chainAvailable = 'c76624a8-6f85-43cf-8ea7-0663502c712f';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
-- MediaInfo
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '09949bda-5332-482a-ae47-5373bd372174';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
-- Tika
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '46824987-bd47-4139-9871-6566f5abdf1a';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = @FITSFileUtilityChain;
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);
--
SET @MicroServiceChainChoice = '';
SET @chainAvailable = '';
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES                
    (@MicroServiceChainChoice, @MicroServiceChainLink, @chainAvailable);


set @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChains, '01d64f58-8295-4b7b-9cab-8f1b153a504f', 'Select file id type - without existing fits/fileIDbyExt');

INSERT INTO WatchedDirectories (pk, watchedDirectoryPath, chain, onlyActOnDirectories, expectedType)
    VALUES (@WatchedDirectory, '%watchDirectoryPath%workFlowDecisions/compressionAIPDecisions/', @MicroServiceChains, True, '76e66677-40e6-41da-be15-709afb334936');

-- -/Normalization tool selection without fits already having been run

CREATE TABLE `FauxFileIDsMap` (
  `pk` int(11) NOT NULL AUTO_INCREMENT,
  `fauxFileUUID` varchar(50) DEFAULT NULL,
  `fileUUID` varchar(50) DEFAULT NULL,
  CONSTRAINT `FilesIDs_ibfk_1` FOREIGN KEY (`fileUUID`) REFERENCES `Files` (`fileUUID`)
  CONSTRAINT `FilesIDs_ibfk_2` FOREIGN KEY (`fauxFileUUID`) REFERENCES `Files` (`fileUUID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


/*
Technical notes:
Can't process the AIP/SIP in any other format at same time, unless it becomes its own non-conflicting entity.
Even still: files will have the same path/uuid, unless new UUID's are assigned.

Assign new file UUIDs to mapping to old file UUIDs.
Do everything, then with DIP, rename so original fileUUIDs apply.
Then remove all references to/with faux-fileUUIDs

-maildir? fileGrpUse
I cheated the system by applying "don't normalize" & a file id type to a key file to normalize a directory.
If the database was still present:
| b3b3b726-acef-4d58-82e4-ef8875d654ce | Don't include in DIP.                               |
As this would be an access command, it wouldn't appear in the mets file.

| 90db809f-268c-4b26-988b-b44c103ac655 | Transcoding maildir to mbox                         |
*/

/* 
Assume starting with uncompressed AIP
Make sure files have UUIDs/entries in the database. Identify fileGrpUse.

Create DIP Directory
Choice: Normalize based on Original or Service Files
Normalize Access
Chance to manually normalize?
Generate DIP
-Should be the same as generate DIP in SIP workflow
Remove AIP copy (created in step 1)
*/

-- --------------------------------------------------------------------------------------------------------------------------

-- generate dip Strip faux sipUUID

-- copy mets to dip

-- unfaux dip File UUIDs

-- manual normalization

-- approve normalization

-- Normalize thumbnails & access

-- Select original/service

-- Select original/service WD

-- Create DIP directory

-- Select & run file id tool

-- Select & run file id tool WD --



-- SET 
INSERT INTO TasksConfigsSetUnitVariable (pk, variable, microServiceChainLink)
    VALUES (@TasksConfigPKReference, 'returnFromManualNormalized', '77a7fa46-92b9-418e-aa88-fbedd4114c9f');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '6f0b612c-867f-4dfd-8e43-5b35b7f882d7', @TasksConfigPKReference, 'Set resume link');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);




-- set maildir FileIDs
SET @TasksConfig = '';
SET @TasksConfigPKReference = '';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @MoveTransferToFailedLink;

INSERT INTO StandardTasksConfigs (pk, filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES (@TasksConfigPKReference, NULL, NULL, NULL, FALSE, NULL, NULL, 'assignFauxFileUUIDs_v0.0', '"%SIPUUID%" "TRIM"');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '36b2e239-4a57-4aa5-8ebc-7a29139baca6', @TasksConfigPKReference, 'Assign file UUIDs');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;


-- Is maildir AIP--
SET @TasksConfig = '';
SET @TasksConfigPKReference = '';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @MoveTransferToFailedLink;

INSERT INTO StandardTasksConfigs (pk, filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES (@TasksConfigPKReference, NULL, NULL, NULL, FALSE, NULL, NULL, 'archivematicaSetTransferType_v0.0', '"%SIPUUID%" "TRIM"');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '36b2e239-4a57-4aa5-8ebc-7a29139baca6', @TasksConfigPKReference, 'Determin processing path for this AIP version.');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 179, @NextMicroServiceChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;





-- assign faux file UUIDs --
SET @TasksConfig = '';
SET @TasksConfigPKReference = '';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @MoveTransferToFailedLink;

INSERT INTO StandardTasksConfigs (pk, filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES (@TasksConfigPKReference, NULL, NULL, NULL, FALSE, NULL, NULL, 'assignFauxFileUUIDs_v0.0', '"%SIPUUID%" "TRIM"');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '36b2e239-4a57-4aa5-8ebc-7a29139baca6', @TasksConfigPKReference, 'Assign file UUIDs');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;


-- determin AIP version --
SET @TasksConfig = '';
SET @TasksConfigPKReference = '';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @MoveTransferToFailedLink;

INSERT INTO StandardTasksConfigs (pk, filterFileEnd, filterFileStart, filterSubDir, requiresOutputLock, standardOutputFile, standardErrorFile, execute, arguments)
    VALUES (@TasksConfigPKReference, NULL, NULL, NULL, FALSE, NULL, NULL, 'archivematicaSetTransferType_v0.0', '"%SIPUUID%" "TRIM"');
INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '36b2e239-4a57-4aa5-8ebc-7a29139baca6', @TasksConfigPKReference, 'Determin processing path for this AIP version.');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 100, @NextMicroServiceChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @MoveTransferToFailedLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;

-- SET Permissions --
SET @TasksConfig = '10846796-f1ee-499a-9908-4c49f8edd7e6';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @MoveTransferToFailedLink;
SET @MicroServiceChain = '';

INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
INSERT INTO MicroServiceChainLinksExitCodes (pk, microServiceChainLink, exitCode, nextMicroServiceChainLink)
    VALUES (@MicroServiceChainLinksExitCodes, @MicroServiceChainLink, 0, @NextMicroServiceChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChain, @MicroServiceChainLink, 'Create DIP from AIP');


-- approve transfer --
SET @TasksConfigPKReference = NULL;
SET @TasksConfig = '';
SET @MicroServiceChainLink = '';
SET @MicroServiceChainLinksExitCodes = '';
SET @defaultNextChainLink = @NextMicroServiceChainLink;
SET @rejectTransferMicroserviceChain = '1b04ec43-055c-43b7-9543-bd03c6a778ba';
SET @MicroServiceChainChoice1 = '';
SET @MicroServiceChainChoice2 = '';


INSERT INTO TasksConfigs (pk, taskType, taskTypePKReference, description)
    VALUES
    (@TasksConfig, '61fb3874-8ef6-49d3-8a2d-3cb66e86a30c', @TasksConfigPKReference, 'Create DIP from AIP');
INSERT INTO MicroServiceChainLinks (pk, microserviceGroup, currentTask, defaultNextChainLink)
    VALUES (@MicroServiceChainLink, @microserviceGroup, @TasksConfig, @defaultNextChainLink);
SET @NextMicroServiceChainLink = @MicroServiceChainLink;

INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES (@MicroServiceChainChoice1, @MicroServiceChainLink, @MicroServiceChain);
INSERT INTO MicroServiceChainChoice (pk, choiceAvailableAtLink, chainAvailable)
    VALUES (@MicroServiceChainChoice2, @MicroServiceChainLink, @rejectTransferMicroserviceChain);
    
SET @MicroServiceChain = '';
INSERT INTO MicroServiceChains (pk, startingLink, description)
    VALUES (@MicroServiceChain, @MicroServiceChainLink, 'createDIPFromAIP-wdChain');

-- create watched directory --
SET @WatchedDirectory = '';
INSERT INTO WatchedDirectories (pk, watchedDirectoryPath, chain, onlyActOnDirectories, expectedType)
    VALUES (@WatchedDirectory, '%watchDirectoryPath%system/createDIPFromAIP/', @MicroServiceChain, 1, '76e66677-40e6-41da-be15-709afb334936');
    
-- /issue-1843


